import './App.css';
import cvsImg from "./images/cvs.jpg";
import gitImg from "./images/git.jpeg";
import htmlImg from "./images/html.jpg";
import attributeImg from "./images/attribute.png";
import nodeImg from "./images/node.jpeg";
import cssImg from "./images/css.png";



function App() {
  return (
    <div className="App">
      <div className="pre-menu">
        <h1 id="title">Тестове завдання</h1>
      </div>
      <div className="menu">
        <a href="#">Головна</a>
        <a href="#description">Опис проекту</a>
        <a href="#about-author">Про автора</a>
        <a href="#about-author">Контакти</a>
      </div>
      <div className="header" id="description">
        Проект створений для проходження в інтернатуру.
        <br /> Мета пректу: вивчити базові функції git, node, npm. Підготувати систему до подальшої роботи.
      </div>
      <div className="work-books">
        <div className="text-center">
          <h3>Система керування версіями</h3>
          <img
            alt="cvs"
            src={cvsImg}
          />

        </div>
        <p>Система керування версіями — інструмент, який дозволяє одночасно, не заважаючи один одному, проводити роботу
        над груповими проектами. Системи керування версіями зазвичай використовуються при розробці програмного
        забезпечення для відстеження, документування
        та контролю над поступовими змінами в електронних документах: у сирцевому коді застосунків, кресленнях,
        електронних моделях та інших документах, над змінами яких одночасно працюють декілька людей. Кожна версія
        позначається унікальною цифрою
        чи літерою, зміни документу занотовуються. Зазвичай також зберігаються дані про автора зробленої зміни та її
        час. Інструменти для контролю версій входять до складу багатьох інтегрованих середовищ розробки. Існують два
        основні типи систем керування
            версіями: з централізованим сховищем та розподіленим.<br />Система контролю дозволяє зберігати попередні
            версії файлів та завантажувати їх за потребою. Вона зберігає повну інформацію про версію кожного з файлів, а
            також повну структуру проекту
            на всіх стадіях розробки. Місце зберігання даних файлів називають репозиторієм. В середині кожного з
            репозиторіїв можуть бути створені паралельні лінії розробки — гілки.
        </p>
      </div>
      <div className="work-area">
        <div className="text-center">
          <h3>Git</h3>
          <img 
              alt="git" 
              src={gitImg} 
              />
        </div>
        <p>Git зберігає дані набором зліпків. Кожного разу при фіксації поточної версії проекту Git зберігає зліпок
        того, як виглядають всі файли проекту. Але якщо файл не змінювався, то дається посилання на раніше
        збережений файл. Git схожий на своєрідну
        файлову систему з інструментами, які працюють поверх неї. Для кожного відстежуваного файлу Git зберігає
        розмір, час створення і останньої зміни. Ці дані зберігаються у файлі index, який знаходиться у теці .git
        Вся база даних Git зберігається
        в теці з назвою .git В Git файли можуть знаходитися в одному із 3-х станів: зафіксованому (файл вже
        збережено в локальній базі даних), зміненому (файл було змінено, але зміни не зафіксовано) і підготовленому
        (файли було змінено і відмічено
            для фіксації).<br /> Галуження — це розмежування від основної лінії розробки. Git дозволяє створити декілька
            гілок і перемикатися між ними. Це корисно, оскільки дозволяє працювати декільком розробникам над своїм
            функціоналом не заважаючи іншим
            і не псуючи основну гілку. За замовчуванням, Git створює гілку з назвою master. Гілка в Git просто являє
            собою вказівник на одну із фіксацій. При кожній новій фіксації гілка в Git рухається автоматично (тобто
            перемикається на фіксацію). Git
            підтримує два способи для інтеграції змін з гілки в гілку: merge (зливання) та rebase (перебазування).
            Основна різниця полягає в тому, що rebase запам'ятовує фіксації у вигляді патчів, перемотує гілку і
            застосовує патчі у вигляді фіксацій
            на відміну від merge, який зливає дві гілки в одну.
        </p>

        <p>Основні команди Git</p>
        <ul>
          <li>git checkout (назва гілки) - перейти в іншу гілку.</li>
          <li>git checkout -b (назва гілки) - створити нову гілку і перейти в неї.</li>
          <li>git commit -m "message" - закомітити зміни в локальний репозиторій.</li>
          <li>git add . - додати всі файли зміни в репозиторій, щоб можна було комітити. </li>
          <li>git clone (адреса репозиторію) - зклонувати репозиторій.</li>
          <li>git status - перевірити статус локального репозиторію.</li>
          <li>git push - завантажити зміни на сервер, щоб було видно на github.</li>
          <li>git pull - взяти нові дані з сервера.</li>
          <li>git branch - показати список локальних гілок (в тому числі активну).</li>
          <li>git merge (назва гілки) - змерджити вказану гілку в поточну</li>

        </ul>
        <p></p>
      </div>
      <div className="work-two">
        <div className="text-center">
          <h3>HTML</h3>
        </div>

        <p>HTML - це мова розмітки за допомогою тегів. Тобто, HTML документ буде складатися з деякої групи елементів, де
        кожен елемент буде визначатися (починатися та закінчуватися) певним тегом (Для деяких елементів кінцевий тег
        не є обов'язвовим) Тобто,
        ТЕГ — це назва елементу, записана у кутових дужках ( &lt;&gt;) Кожен HTML тег має свою унікальну назву з
            визначеним синтаксисом, яка записується латинськими літерами і не чутлива до регістру.</p>
        <p>Елементи HTML поділяються на:</p>
        <ul>
          <li>Блокові елементи (block)</li>
          <li>Рядкові (вбудовані) елементи (inline)</li>
          <li>Рядково- (вбудований) блокові (inline-block)</li>
        </ul>
        <p>Структура HTML сторінки:</p>
        <div className="image-left">
          <img 
             alt="html" 
             src={htmlImg}
             />
          <p>Веб-посилання - спеціальний тег, <br />через який можна перейти з однієї веб-сторінки на іншу. Крім того,
          він дає можливість створити зміст сторінки. Веб-посилання - це те ж саме, що html-посилання або
          гіпертекстове посилання. Якщо клацнути на веб-посилання
                лівою кнопкою "мишки", щось обов'язково відбудеться:</p>
          <div style={{ clear: "both" }}></div>
          {/* <div className="clear-both"></div> */}
        </div>
        <p> ЯКІРНІ посилання:</p>
        <p>
          <br /> Це посилання-закладки, при переході по яким браузер перегортає сторінку до заздалегідь вказаного
            абзацу. Або, як їх ще називають, хеші.
        </p>
        <p>HTML-посилання :</p>
        <p>Веб-посилання - спеціальний тег, через який можна перейти з однієї веб-сторінки на іншу. Крім того, він дає
        можливість створити зміст сторінки. Веб-посилання - це те ж саме, що html-посилання або гіпертекстове
        посилання. Якщо клацнути на веб-посилання
        лівою кнопкою "мишки", щось обов'язково відбудеться:
        </p>
        <ul>
          <li>Перехід з однієї веб-сторінки на іншу</li>
          <li>Перехід у якусь частину веб-сторінки</li>
          <li>Створюється лист (запускається Скайп, робиться телефонний дзвінок)</li>
          <li>Скачується файл</li>
        </ul>

        <p>AТРИБУТ завжди повинен мати:</p>

        <ul>
          <li>Пробіл між ім'ям атрибута і назвою елементу (або попереднім атрибутом, якщо такий є).</li>
          <li>Ім'я атрибута, за яким іде знак дорівнює.</li>
          <li>Значення атрибута, загорнене в прямі лапки.</li>
        </ul>
        <div className="text-center">
          <img 
             alt="attribute" 
             src={attributeImg}
             width="800" 
             />
        </div>
      </div>

      <div className="work-three">
        <div className="text-center">
          <h3>Nodejs and npm</h3>
          <img 
             alt="node" 
             src={nodeImg}
             width="600" 
             />
        </div>
        <p>Node.js — платформа з відкритим кодом для виконання високопродуктивних мережевих застосунків, написаних мовою
        JavaScript.Якщо раніше Javascript застосовувався для обробки даних в браузері користувача, то node.js надав
        можливість виконувати JavaScript-скрипти
        на сервері та відправляти користувачеві результат їхнього виконання. Платформа Node.js перетворила
        JavaScript на мову загального використання з великою спільнотою розробників.
            <br />Node.js має наступні властивості:
        </p>
        <p>Для керування модулями використовується пакетний менеджер npm (node package manager).</p>
        <ul>
          <li>Асинхронна одно-нитева модель виконання запитів; </li>
          <li>Неблокуючий ввід/вивід;</li>
          <li>Система модулів CommonJS;</li>
          <li>Рушій JavaScript Google V8;</li>

          <li>Npm - це менеджер пакунків для мови програмування JavaScript. Для середовища виконання Node. js це
          менеджер пакунків за замовчуванням. Включає в себе клієнт командного рядка, який також називається npm,
          а також онлайн-базу даних публічних
              та приватних пакунків, яка називається реєстром npm. </li>
        </ul>
      </div>

      <div className="work-four">
        <div className="text-center">
          <h3>CSS</h3>
        </div>

        <p>CSS (Cascading Style Sheets - таблиця каскадних стилів) - мова за допомогою якої оформлюються усі веб
        сторінки. Для того, щоб підключити CSS стиль до певного HTML тегу чи сукупності тегів використовуються
            спеціальні HTML атрибути class чи id.</p>
        <p>Анатомія правила CSS:</p>
        <div className="text-center">
          <img 
             alt="css"
             src={cssImg}
             />
        </div>

        <ul>
          <li>Selector - Назва елементу HTML на початку правила. Селектор вибирає елемент чи елементи, які будуть
                стилізовані (у нашому випадку, елементи p). Для стилізації інших елементів просто змініть селектор.</li>
          <li>ID селектори (або ідентифікатори)- Будь-який ідентифікатор (ID) - це якесь ім'я, яке ви, так само, як і
          у випадку з класами, можете застосувати до будьякого HTML-тегу. Основна відмінність - ID повинен бути
                унікальний в рамках html-документа.</li>
          <li>Клас - це якесь ім'я, рядок, який ми можемо застосувати до будь-яких HTML-тегів, щоб згодом посилатися
          на них - на ім'я класу. Як ім'я класу ви можете використовувати практично будь-який рядок. Зручність
          таких селекторів в тому, що можна привласнити
          одне ім'я класу безлічі htmlтегів у документі і потім управляти їх зовнішнім виглядом, звертаючись до
                них по імені класу.</li>
          <li>Псевдо-класи-CSS - link, visited, active, hover Псевдоклас дозволяє враховувати різні умови або події
                при визначенні властивостей HTML тэгу. </li>
          <li>Псевдо-елементи-представляють собою об'єкти, що не включені до HTML.</li>
        </ul>
      </div>

      <div className="footer">

        <div className="author" id="about-author">
          Слободенюк Т.В.<br />
          <a href="https://github.com/tatatia" target="_blank">https://github.com/tatatia</a>
          <br />
          <a href="https://dribbble.com/shots/11529735-Online-Store-WebUI-Kit-Free-PSD-Download/attachments/3150018?mode=media"
            target="_blank">Оригінал дизайну</a>

        </div>
      </div>
      <div className="post-footer"></div>

      <script src="./node_modules/jquery/dist/jquery.js"></script>
      <script src="./js/script.js"></script>
    </div>
  );
}

export default App;
